#ifndef RAC_H_INCLUDED
#define RAC_H_INCLUDED
#include <stdio.h>
#include <stdlib.h>
/// M : N / ρ --> 110 / 0,86 --> M = 127
#define MRAC 127


  typedef struct {
    int DNI;
    char nombreyapellido[80];
    char servicios[120];
    char domicilio[80];
    char correo[50];
    char telefono[30];
    }PrestadorRAC;
   typedef struct {
   char estado;
   PrestadorRAC prestador;
  } CeldaRAC;
  typedef struct{
   CeldaRAC celda[MRAC];
  } RAC;


     int CantElem=0;
     int hashing_RAC (int dni) {
     char x[10];
     int longitud , i ;
     int contador=0;
     sprintf(x,"%d" , dni );
     longitud=strlen(x);
     for (i=0; i< longitud; i++)
     contador+=((int)x[i]) * (i+1);
      return (contador % MRAC);
    }
    void init_RAC(RAC *tabla){
     int i;
    for(i=0; i<MRAC; i++){
    tabla->celda[i]; = "*";///Inicializamos todas las celdas como virgenes
  }
 }

  int Localizar_RAC(RAC *tabla, int dni, int cargados, int *pos, int *costo) {
    *pos = hashing(dni);
    int i = *pos;
    int aux = -1;
    int contador = 0;
    int k = 1;

    *costo = 0;


    if (cargados == 0) {
        return 0;
    }


    while (contador < MRAC && tabla->celdas[i].estado != "*" &&
           tabla->celdas[i].prestador.DNI != dni) {


        if (aux == -1 && tabla->celdas[i].estado == "+") {
            aux = i;
        }
        // Calculamos la siguiente posición usando exploración cuadrática
        i = (i + k) % MRAC;
        k++;
        contador++;
        (*costo)++;
    }

    // Caso 1: Prestador encontrado
    if (tabla->celdas[i].prestador.DNI == dni) {
        *pos = i;
        return 1;  // Encontrado
    }

    // Caso 2: No encontrado, pero se puede dar de alta
    if (tabla->celdas[i].estado == "+") {
        if (aux != -1) {
       *pos = aux;
       } else {
       *pos = i;
           }
        return 0;
    }

    // Caso 3: No encontrado y no se puede insertar
    if (aux != -1) {
        *pos = aux;
        return 0;
    }

    return -1;
}

  int Alta_RAC(RAC *tabla, int *cargados, PrestadorRAC prestador, int *costo) {
    int pos = 0;
    int resultado = Localizar_RAC(tabla, prestador.DNI, *cargados, &pos, costo);

    if (*cargados >= MRAC) {
        return -1;  // No hay espacio disponible
    }

    if (resultado == 1) {
        return 0;  // Fallo en el alta: el prestador ya existe
    } else if (resultado == -1) {
        return -1;  // No se puede insertar (tabla llena)
    } else {
        // Insertamos el prestador
        tabla->celdas[pos].prestador = prestador;
        (*cargados)++;
        return 1;  // Alta exitosa
    }
}

 int Baja_RAC(RAC *tabla, int dni, int *cargados, int *costo) {
    int pos = 0;
    int encontrado = Localizar_RAC(tabla, dni, *cargados, &pos, costo);

    if (*cargados == 0) {
        return -1;
    }

    if (encontrado == 0) {
        return 0;
    }


    tabla->celdas[pos].estado = "+";
    (*cargados)--;

    return 1;  // Baja exitosa
}

 int Evocar_RAC(RAC *tabla, int dni, int *cargados, int *costo) {
    int pos = 0, pos_h = hashing_RAC(dni);  // Posición original según hash
    int encontrado = Localizar_RAC(tabla, dni, *cargados, &pos, costo);

    if (*cargados == 0) {

        return -1;  // Estructura vacía
    }

    if (encontrado == 0) {

        return 0;  // Evocación no exitosa
    }

    // Mostrar información del prestador encontrado
    PrestadorRAC p = tabla->celdas[pos].prestador;
    printf("Prestador encontrado:\n");
    printf("DNI: %d\n", p.DNI);
    printf("Nombre: %s\n", p.nombreyapellido);
    printf("Servicios: %s\n", p.servicios);
    printf("Domicilio: %s\n", p.domicilio);
    printf("Correo: %s\n", p.correo);
    printf("Teléfono: %s\n", p.telefono);

    return 1;  // Evocación exitosa
}
 void Mostrar_RAC(RAC *tabla, int cargados) {
    int counta = 0;  // Contador para la paginación
    char continuar;

    printf("Mostrando estructura RAC:\n");

    for (int i = 0; i < MRAC; i++) {
        // Mostrar estado de la celda
        if (tabla->celda[i].estado == '*') {
            printf("Celda %d: Virgen (nunca usada)\n", i);
        } else if (tabla->celda[i].estado == '+') {
            printf("Celda %d: Libre (usada previamente)\n", i);
        } else {
            // Mostrar datos del prestador en celdas ocupadas
            PrestadorRAC p = tabla->celda[i].prestador;
            printf("Celda %d: Ocupada\n", i);
            printf("  DNI: %d\n", p.DNI);
            printf("  Nombre: %s\n", p.nombreyapellido);
            printf("  Servicios: %s\n", p.servicios);
            printf("  Domicilio: %s\n", p.domicilio);
            printf("  Correo: %s\n", p.correo);
            printf("  Teléfono: %s\n", p.telefono);
        }

        /// Paginación
        counta++;
        if (counta % 5 == 0) {
            printf("¿Desea continuar mostrando más celdas? (s/n): ");
            scanf(" %c", &continuar);
            if (continuar == 'n' || continuar == 'N') {
                break;  // Terminar la visualización
            }
        }
    }
}







#endif // RAC_H_INCLUDED
