#ifndef RAC_H_INCLUDED
#define RAC_H_INCLUDED


#include <stdio.h>
#include <stdlib.h>
#include "RAL.h"
#define MRAC 127
int CantElemRAC=0, RAC_c=0, RAC_t_E=0, RAC_t_F=0, RAC_max_E=0, RAC_max_F=0, RAC_evocar_E=0, RAC_evocar_F=0;
float RAC_medio=0;

void Localizar_RAC(Prestador l[], int dni, int *exito, int *pos, int opcion) {
    int i = hashing(dni), c=0, posf, j=hashing(dni);
    if (opcion==3){
        RAC_c++;
    }
    while (l[i].DNI!=-1&&l[i].DNI!=dni&&c<MRAC){//controlar no recorrer los M baldes
            if (l[i].DNI==-2){ // controlar que si pasé por una libre guarde esa posición para retornar posteriormente
             posf=i;
            }
        i=i+(j-1)%MRAC;
        c++;
        if (opcion==3){
        RAC_c++;
        }
    }
    if (l[i].DNI!=-1&&l[i].DNI!=dni&&c<MRAC){
        *pos=i;
        *exito=1;
    }
        else {
            *exito=0;
            if (l[i].DNI==-2){
            *pos=posf;
            }
                else *pos=i;
    }
}
void Alta_RAC(Prestador r[], Prestador nuevo,  int dni, int *exito, int opcion){
int exitoLocalizar, pos;
    Localizar_RAL(r, dni, &exitoLocalizar, &pos, opcion);
    if (!exitoLocalizar){
        if (CantElem<MAXPRESTADORES){
        r[pos]=nuevo;
        *exito=1;
        CantElemRAC++;
        }
        else *exito=-1;
    }
        else *exito=2;
}

void Baja_RAC(Prestador r[], int dni, int *exito, Prestador e, int opcion){
    int exitoLocalizar, pos;
    Localizar_RAL(r, dni, &exitoLocalizar, &pos, opcion);
    if (exitoLocalizar&&confirma(r, pos, e)){
        r[pos].DNI=-2; //-2: marca de celda libre
        *exito=1;
        CantElemRAC--;
    }
    else *exito=0;
}
void Evocar_RAC(Prestador r[], Prestador *e, int dni, int *exito, int opcion){
    int exitoLocalizar, pos;
     Localizar_RAL(r, dni, &exitoLocalizar, &pos, opcion);
     if(exitoLocalizar){
        *e=r[pos];
        *exito=1;
        RAC_evocar_E++;
        if (RAC_c>RAC_max_E){
            RAC_max_E=RAC_c;
        }
        RAC_t_E+=RAC_c;
        RAC_c=0;
     }
     else {
            *exito=0;
     RAC_evocar_F++;
     if (RAC_c>RAC_max_F){
            RAC_max_F=RAC_c;
        }
        RAC_t_F+=RAC_c;
        RAC_c=0;
     }
}


#endif // RAC_H_INCLUDED
