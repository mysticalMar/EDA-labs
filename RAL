#include <stdio.h>
#include <stdlib.h>
#define MRAL 130
#define MAXPRESTADORES 110

typedef struct {
    int DNI;
    char nombreyapellido[80];
    char servicios[120];
    char domicilio[80];
    char correo[50];
    char telefono[30];
} Prestador;
int CantElem=0;
int hashing (int dni) {
 char x[10];
 int longitud , i ;
 int contador=0;
 sprintf(x,"%d" , dni );
 longitud=strlen(x);
 for (i=0; i< longitud; i++)
 contador+=((int)x[i]) * (i+1);
 return (contador %MRAL );
 }
 void inicializarRAL(Prestador r[]){
 int i;
     for (i=0; i<MRAL; i++){
        r[i].DNI='*';//marca de celda virgen
     }
 }
void Localizar_RAL(Prestador l[], int dni, int *exito, int *pos) {
    int i = hashing(dni);
    while (l[i].DNI!='*'&&l[i].DNI!=dni){
        i=(i+1)%MRAL;
    }
    *pos=i;
    if (l[i].DNI==dni){
        *exito=1;
    }
    else *exito=0;
        printf("posicion: %d \n", i);
    }

void Alta_RAL(Prestador r[], Prestador nuevo,  int dni, int *exito){
int exitoLocalizar, pos;
    Localizar_RAL(r, dni, &exitoLocalizar, &pos);
    if (!exitoLocalizar){
        if (CantElem<MAXPRESTADORES){
        r[pos]=nuevo;
        *exito=1;
        CantElem++;
        }
        else *exito=-1;
    }
        else *exito=2;
}

void Baja_RAL(Prestador r[], int dni, int *exito, Prestador e){
    int exitoLocalizar, pos;
    Localizar_RAL(r, dni, &exitoLocalizar, &pos);
    if (exitoLocalizar&&confirma(r, &pos, e)){
        r[pos].DNI='+';
        *exito=1;
    }
    else *exito=0;
}
void Evocar_RAL(Prestador r[], Prestador *e, int dni, int *exito){
    int exitoLocalizar, pos;
     Localizar_RAL(r, dni, &exitoLocalizar, &pos);
     if(exitoLocalizar){
        *e=r[pos];
        *exito=1;
     }
     else *exito=0;
}
int confirma(Prestador l[], int pos, Prestador elemento){
    int c;
   if (strcasecmp(l[pos].nombreyapellido, elemento.nombreyapellido) == 0 &&
    strcasecmp(l[pos].servicios, elemento.servicios) == 0 &&
    strcasecmp(l[pos].domicilio, elemento.domicilio) == 0 &&
    strcasecmp(l[pos].correo, elemento.correo) == 0 &&
    strcasecmp(l[pos].telefono, elemento.telefono) == 0) {
    c = 1;
} else {
    c = 0;
}
return c;
}
void MostrarEstructura(Prestador l[]) {
    system("cls");
    int i, c=0;

    if (CantElem == 0) {
        printf("La lista de prestadores est� vac�a.\n");
        return;
    }
    for (i = 0; i < MRAL; i++) {
        if (l[i].DNI!='*'){
        printf("--------- Listado de Prestadores ---------\n");
        printf("Prestador %d:\n", i + 1);
        printf("DNI: %d\n", l[i].DNI);
        printf("Nombre y Apellido: %s\n", l[i].nombreyapellido);
        printf("Servicios: %s\n", l[i].servicios);
        printf("Domicilio: %s\n", l[i].domicilio);
        printf("Correo: %s\n", l[i].correo);
        printf("Telefono: %s\n", l[i].telefono);
        printf("------------------------------------------\n");
        c++;
        if (c==5){
            getchar();
            c=0;
        }
        }
    }
}
void precarga(Prestador r[]){
    Prestador aux;
    int exito;
FILE *fp = fopen("Prestadores.txt", "r");

    if (fp == NULL) {
        printf("No se puede abrir el archivo\n");
        return 0;
    }
    else {
      while (!feof(fp)){
 fscanf(fp, "%d", &aux.DNI);
 fscanf(fp, " %[^\n]", aux.nombreyapellido);
 fscanf(fp, " %[^\n]", aux.servicios);
 fscanf(fp, " %[^\n]", aux.domicilio);
 fscanf(fp, " %[^\n]", &aux.correo);
 fscanf(fp, " %[^\n]", &aux.telefono);
 Alta_RAL(r, aux, aux.DNI, &exito);
}
    }
}

