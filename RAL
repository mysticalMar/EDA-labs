#ifndef RAL_H_INCLUDED
#define RAL_H_INCLUDED

#include <stdio.h>
#include <stdlib.h>
#define MRAL 133
#define MAXPRESTADORES 110

///Variables Globales de Costo
int maxEvocExitosa_RAL = 0, maxEvocNoExitosa_RAL = 0;
int totalEvocExitosa_RAL = 0, totalEvocNoExitosa_RAL = 0;
int cantEvocExitosa_RAL = 0, cantEvocNoExitosa_RAL = 0;



typedef struct {
    int DNI;
    char nombreyapellido[80];
    char servicios[120];
    char domicilio[80];
    char correo[50];
    char telefono[30];
} PrestadorRAL;

int hashing (int dni) {
 char x[10];
 int longitud , i ;
 int contador=0;
 sprintf(x,"%d" , dni );
 longitud=strlen(x);
 for (i=0; i< longitud; i++)
 contador+=((int)x[i]) * (i+1);
 return (contador %MRAL );
 }
 void inicializar(PrestadorRAL r[]){
 int i;
     for (i=0; i<MRAL; i++){
        r[i].DNI=-1;//marca de celda virgen
     }
 }
void Localizar_RAL(PrestadorRAL l[], int dni, int *exito, int *pos, int *costo, int opcion) {
    int i = hashing(dni), c = 0, posf = -1;
    *costo = 1;  // Iniciamos el costo en 1 porque ya consultamos la primera celda

    while (l[i].DNI != -1 && l[i].DNI != dni && c < MRAL) {  // Recorremos hasta encontrar el DNI o un espacio vacío
        if (l[i].DNI == -2) {
            posf = i;  // Guardamos la posición de una celda libre (borrada) si la encontramos
        }
        i = (i + 1) % MRAL;  // Siguiente celda (exploración lineal)
        c++;
        (*costo)++;  // Incrementamos el costo por cada consulta
    }

    if (l[i].DNI == dni) {
        *pos = i;
        *exito = 1;  // Encontrado
    } else {
        *exito = 0;
        if (l[i].DNI == -2) {
            *pos = posf;  // Retornamos la posición de una celda libre si se encontró
        } else {
            *pos = i;  // Si no se encontró, retornamos la posición de la celda virgen
        }
    }
}


void Alta_RAL(PrestadorRAL r[], PrestadorRAL nuevo,  int dni, int *exito, int opcion){
int exitoLocalizar, pos;
int costo=0;
    Localizar_RAL(r, dni, &exitoLocalizar, &pos,&costo, opcion);
    if (!exitoLocalizar){
        if (CantElem<MAXPRESTADORES){
        r[pos]=nuevo;
        *exito=1;
        CantElem++;
        }
        else *exito=-1;
    }
        else *exito=2;
}

void Baja_RAL(PrestadorRAL r[], int dni, int *exito, PrestadorRAL e, int opcion){
    int exitoLocalizar, pos;
    int costo = 0;
    Localizar_RAL(r, dni, &exitoLocalizar, &pos,&costo, opcion);
    if (exitoLocalizar&&confirma(r, pos, e)){
        r[pos].DNI=-2; //-2: marca de celda libre
        *exito=1;
        CantElem--;
    }
    else *exito=0;
}
void Evocar_RAL(PrestadorRAL r[], PrestadorRAL *e, int dni, int *exito, int *costo) {
    int exitoLocalizar, pos;
    Localizar_RAL(r, dni, &exitoLocalizar, &pos, costo, 3);  // Buscar prestador y obtener costo

    if (exitoLocalizar) {
        *e = r[pos];
        *exito = 1;

        // Actualizar costos de evocación exitosa
        totalEvocExitosa_RAL += *costo;
        cantEvocExitosa_RAL++;
        if (*costo > maxEvocExitosa_RAL) {
            maxEvocExitosa_RAL = *costo;
        }
    } else {
        *exito = 0;

        // Actualizar costos de evocación no exitosa
        totalEvocNoExitosa_RAL += *costo;
        cantEvocNoExitosa_RAL++;
        if (*costo > maxEvocNoExitosa_RAL) {
            maxEvocNoExitosa_RAL = *costo;
        }
    }
}

int confirma(PrestadorRAL l[], int pos, PrestadorRAL elemento){
    int c;
   if (strcasecmp(l[pos].nombreyapellido, elemento.nombreyapellido) == 0 &&
    strcasecmp(l[pos].servicios, elemento.servicios) == 0 &&
    strcasecmp(l[pos].domicilio, elemento.domicilio) == 0 &&
    strcasecmp(l[pos].correo, elemento.correo) == 0 &&
    strcasecmp(l[pos].telefono, elemento.telefono) == 0) {
    c = 1;
} else {
    c = 0;
}
return c;
}
void MostrarEstructura_RAL(PrestadorRAL l[]) {
    system("cls");
    int i, c=0;

    if (CantElem == 0) {
        printf("La lista de prestadores esta vacia.\n");
        return;
    }
    for (i = 0; i < MRAL; i++) {
        if (l[i].DNI!=-1&&l[i].DNI!=-2){
        printf("--------- Listado de Prestadores ---------\n");
        printf("Prestador %d:\n", i + 1);
        printf("DNI: %d\n", l[i].DNI);
        printf("Nombre y Apellido: %s\n", l[i].nombreyapellido);
        printf("Servicios: %s\n", l[i].servicios);
        printf("Domicilio: %s\n", l[i].domicilio);
        printf("Correo: %s\n", l[i].correo);
        printf("Telefono: %s\n", l[i].telefono);
        printf("------------------------------------------\n");
        c++;
        if (c==5){
            getchar();
            c=0;
        }
        }
    }
}
#endif // RAL_H_INCLUDED
